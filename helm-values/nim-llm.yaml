fullname: ${name}
image:
  repository: ${model_id}
  tag: latest
imagePullSecrets:
  - name: ngc-secret-${name}
model:
  name: ${name}
  ngcAPISecret: ngc-api-${name}
  ngcAPIKey: ${ngc_api_key}
  nimCache: /model-store
resources:
  limits:
    nvidia.com/gpu: ${num_gpu} # Limit the number of GPUs based on requirements
  requests:
    nvidia.com/gpu: ${num_gpu} # Request the number of GPUs
statefulSet:
  enabled: true # Enable statefulset for persistent storage
persistence:
  enabled: true
  existingClaim: ${pvc_name} # Use an existing PVC for model storage
nodeSelector:
  NodeGroupType: gpu-workloads # Select nodes with GPUs
  type: karpenter # Use karpenter for scaling
tolerations:
  - key: "nvidia.com/gpu"
    operator: "Exists"
    effect: "NoSchedule" # Allow scheduling on nodes with GPUs
metrics:
  enabled: true
  serviceMonitor:
    enabled: true # Enable service monitoring for Prometheus
    additionalLabels:
      release: prometheus
      app: prometheus
autoscaling:
  enabled: true # Enable autoscaling based on load
  minReplicas: 1 # Minimum replicas
  maxReplicas: 5 # Maximum replicas
  scaleDownStabilizationSecs: 300 # Stabilization time for scaling down
  metrics:
    - type: Pods
      pods:
        metric:
          name: num_requests_running
        target:
          type: Value
          averageValue: 5 # Scale based on number of running requests
ingress:
  enabled: true
  className: nginx # Use NGINX for ingress
  annotations:
    kubernetes.io/ingress.class: nginx
  hosts:
    - paths:
        - path: /${name}
          pathType: Prefix
          serviceType: openai
